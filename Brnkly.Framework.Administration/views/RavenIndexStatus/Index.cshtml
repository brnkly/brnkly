@model System.Collections.Generic.IEnumerable<Brnkly.Framework.Administration.Models.RavenIndexGraphModel>

@{
    ViewBag.Title = "Raven index status";
}

<h2>Raven index status</h2>
<div style="float: right;">
    <span class="index-missing">✖ missing index</span>
    <span class="pending-change">changed</span>
</div>

@foreach (var graph in Model)
{
    <h3>Store name: @graph.StoreName</h3>

    foreach (var status in graph.IndexStatuses)
    {
        <div class="index-graph-container" data-role="collapsible" data-theme="c" data-content-theme="c" data-collapsed="true">
            <h3>@status.IndexName</h3>
            <table class="index-graph">
                <thead>
                    <tr>
                        <th>server</th>
                        <th>hash code</th>
                        <th>timestamp</th>
                        <th>stale?</th>
                        <th>results</th>
                    </tr>
                </thead>
                <tbody>
                          @foreach (var pair in status.IndexExistenceByServerName)
                          {
                              var serverName = pair.Key;
                              var exists = pair.Value;
                              var routeValues = new 
                                                    {
                                                        ServerName = serverName,
                                                        graph.StoreName,
                                                        status.IndexName
                                                    };
                              var statusMark = exists ? null : "✖";
                              var statusClass = exists ? null : "index-missing";
                              <tr class="server-status @statusClass" data-server="@serverName" data-index="@status.IndexName">
                                  <td>@statusMark @serverName</td>
                                  @if(exists)
                                  {
                                      <td class="hash-code" data-url="@Url.Action("GetHashCode", "RavenIndexStatus", routeValues)"></td>                                      
                                      <td class="timestamp" data-url="@Url.Action("Stats", "RavenIndexStatus", routeValues)"></td>                                      
                                      <td class="stale"></td>
                                      <td class="results"></td>                                      
                                      <td class="command">
                                          @Html.ActionLink("delete", "Delete", "RavenIndexStatus", routeValues, null)
                                      </td>
                                      <td class="command">
                                          @Html.ActionLink("reset", "Reset", "RavenIndexStatus", routeValues, null)
                                      </td>
                                      <td>
                                          @Html.ActionLink("raw query", "GetFromStore", "RavenConfig", new { storeName = graph.StoreName, serverName, path = "indexes/" + status.IndexName + "?pageSize=0" }, new { target = "_blank" })
                                      </td>
                                      <td class="copy-index">
                                          @Html.ActionLink("copy definition", "Copy", "RavenIndexStatus", routeValues, null)                                
                                          @{
                                      var options = new[] { "--" }
                                          .Union(graph.AllServerNames.Where(n => n != serverName))
                                          .Select(n => new SelectListItem { Text = n, Value = n, Selected = n == "--" });
                                          }
                                          @Html.Label("copy definition to:")
                                          @Html.DropDownList("indexCopy", options, new { data_role = "none" })
                                      </td>
                                  }
                              </tr>
                          }
                      </tbody>
            </table>
        </div>
    }
}

<style type="text/css">
    table.index-graph { border-collapse: collapse;}
    table.index-graph td { padding: 3px 20px 3px 0px;}
    table.index-graph thead { text-align: left;}
    table.index-graph tbody tr:nth-child(odd) {background-color: #DDD;}
    
    .index-missing, table.index-graph tbody tr.index-missing { color: red; background: lightgoldenrodyellow;}
    .pending-change, table.index-graph tbody tr.pending-change { background: lightgreen;}
</style>

<script type="text/javascript">

    (function () {

        function getMessage(message, commandName, indexName, serverName) {
            return 'Command [' + commandName + '] ' + message + ' for [' + indexName + '] on [' + serverName + '].';
        }

        function displayHashCode(row) {
            var td = row.find('td.hash-code');
            var url = td.data('url');

            if (!url) {
                return;
            }

            $.get(url).done(function (hashCode) {
                td.text(hashCode);
            });
        }

        function displayStats(row) {
            var timestamp = row.find('td.timestamp');
            var stale = row.find('td.stale');
            var results = row.find('td.results');
            var url = timestamp.data('url');

            if (!url) {
                return;
            }

            $.get(url).done(function (data) {
                var epochSeconds = /\d+/.exec(data.timestamp)[0];
                timestamp.text(new Date(parseInt(epochSeconds, 10)).toUTCString());
                stale.text(data.stale);
                results.text(data.results);
            });
        }

        function bindExpand() {
            $('div.index-graph-container h3').bind('click', function (e) {
                var graphDiv = $(this).closest('.index-graph-container');

                if (!graphDiv.hasClass('ui-collapsible-collapsed')) {
                    refreshStats(graphDiv);
                }
                
            });
        }

        function refreshStats(graphDiv) {
            graphDiv.find('tbody tr').each(function () {
                var row = $(this);

                displayHashCode(row);
                displayStats(row);
            });
        }

        function bindSimpleCommands() {
            $('tr.server-status td.command a').click(function (e) {
                e.preventDefault();

                var a = $(e.target);
                var href = a.attr('href');
                var row = a.closest('tr');
                var serverName = row.data('server');
                var indexName = row.data('index');
                var command = a.text();

                var confirmation =
                    window.confirm("This action cannot be undone. Are you sure you want to " + command + "?");

                if (!confirmation) {
                    return;
                }

                $.get(href).done(function (data) {
                    if (data.success) {
                        alert(getMessage("successful", command, indexName, serverName));
                        row.addClass('pending-change');
                    } else {
                        alert(getMessage("failed", command, indexName, serverName));
                    }
                }).fail(function () {
                    alert(getMessage("failed", command, indexName, serverName));
                });
            });
        }

        function bindCopyCommands() {
            $('tr.server-status td.copy-index').each(function () {
                var td = $(this);
                var a = td.find('a');
                var href = a.attr('href');
                var select = td.find('select').hide();
                var label = td.find('label').hide();

                a.click(function (e) {
                    e.preventDefault();
                    select.show();
                    label.show();
                    a.hide();
                });

                select.change(function (e) {
                    var serverName = select.val();

                    if (serverName === '--') {
                        return;
                    }

                    var confirmation =
                        window.confirm("This action cannot be undone. Are you sure you want to copy this index to " + serverName + "?");

                    if (!confirmation) {
                        return;
                    }

                    var targetRow = td.closest('tbody').find('tr[data-server="' + serverName + '"]');

                    var url = href + "&target=" + serverName;

                    $.get(url).done(function () {
                        alert('Copy successful.');
                        targetRow.addClass('pending-change');                        
                    }).fail(function () {
                        alert('Copy failed.');
                    });

                });
            });
        }


        $(function () {
            bindExpand();
            bindSimpleCommands();
            bindCopyCommands();
        });
    })();
</script>
