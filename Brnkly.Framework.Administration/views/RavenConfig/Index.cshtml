@using Brnkly.Framework.Administration.Models;
@model RavenConfigEditModel
@{
    ViewBag.Title = "Raven config";
}

<h2>Raven config</h2>

@if(!string.IsNullOrWhiteSpace(Model.ErrorMessage))
{
    <div class="validation-summary-errors">
        <p>The updates listed below failed. See the event log for more details.</p>
        <p>@Model.ErrorMessage</p>
    </div>
}

@using (Html.BeginForm("Save", "RavenConfig"))
{
    <div class="ui-bar ui-bar-c save-publish">
        <fieldset class="ui-grid-c">
            <div class="ui-block-a">
                <button type="submit" 
                        onclick="$(this).closest('form').attr('action', '@Url.Action("Publish", "RavenConfig")');" 
                        data-theme="b" data-icon="check" data-iconpos="left" data-inline="true">Publish</button>
            </div>
            <div class="ui-block-b"><button type="submit" data-theme="d">Save</button></div>
            <div class="ui-block-c">
                @Html.ActionLink(
                    "Raw requests",
                    "GetFromStore")
            </div>
            <div class="ui-block-d">
                @Html.ActionLink(
                    "Index status",
                    "Index",
                    "RavenIndexStatus")
            </div>
        </fieldset>
    </div> 

    <div style="padding:8px 0 8px 0;">
        <div style="float:left;margin-right:16px;">Pending</div>
        <div style="float:left;margin-right:16px;" class="Added">addition</div>
        <div style="float:left;margin-right:16px;" class="Changed">change</div>
        <div style="float:left;margin-right:16px;" class="Deleted">delete</div>
        <div style="clear:both;"></div>
    </div>

    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.OriginalEtag)
    @Html.ValidationSummary()
    @Html.EditorFor(m => m.Stores)
}
 
@using (Html.BeginForm("AddServer", "RavenConfig"))
{
    <div data-role="fieldcontain" class="ui-hide-label">
        <label for="serverName">Add Raven server:</label>
        <input type="text" name="serverName" placeholder="Add Raven server" data-theme="d" />
    </div>
}
@using (Html.BeginForm("DeleteServer", "RavenConfig"))
{
    <div data-role="fieldcontain">
        <label for="serverName">Delete Raven server:</label>
        @Html.DropDownList(
            "serverName",
            new SelectList(this.ViewBag.ServerNames),
            "[ Select server ]",
            new { data_role = "none", @class = "submit-dropdown" })
    </div>
}

<script type="text/javascript">
    $(document).ready(function () {
        $(".store-status").each(function () {
            var el = $(this);
            el.append('Fetching...');
            var url = '@Url.Action("StoreStatus", "RavenConfig")';
            $.ajax({
                cache: false,
                url: url + '?' + $.param({
                    serverName: el.attr('data-server'),
                    storeName: el.attr('data-store')
                })
            }).done(function (data) {
                el.replaceWith('<div class="store-status">' + data + '</div>');
            }).fail(function () {
                el.replaceWith('<div class="store-status">Unable to Load.</div>');
            });
        });

        $('.replication-status').live('click', function () {
            $(this).next().slideDown(100);
        });

        $.ajax({
            cache: false,
            url: '@Url.Action("Index", "RavenReplicationStatus")'
        }).done(function (data) {
            var store;

            for (var i = 0; i < data.length; i++) {
                store = data[i];
                updateLastDocEtag(store);
                processServers(store);
            }
        });
    });

    function updateLastDocEtag(store) {
        var lastEtagElement,
            lastEtag;

        for (var etagKey in store.LastDocEtags) {
            lastEtagElement = $('div[data-store=' + store.StoreName + '] .last-etag[data-server=' + etagKey + ']');
            lastEtag = store.LastDocEtags[etagKey];
            lastEtagElement
                .text(lastEtag.substring(14))
                .attr('title', 'Last Etag: ' + lastEtag);
        }
    }

    function processServers(store) {
        for (var k = 0; k < store.Servers.length; k++) {
            updateReplicationStatus(store, store.Servers[k]);
        }
    }

    function updateReplicationStatus(store, servers) {
        var server,
            replicationStatusElement,
            replicationStatus;

        for (var j = 0; j < servers.length; j++) {
            server = servers[j];
            replicationStatusElement = $('div[data-store=' + store.StoreName + '] div[data-server=' + server.Source + '] .replication-status[data-destination=' + server.Destination + ']');
            replicationStatus = server.UpToDate ? 'current' : 'stale';
            replicationStatusElement
                .text(replicationStatus)
                .attr('title', 'Last Etag: ' + server.SourceLastDocEtag + '\nLast Modified: ' + server.SourceLastModifiedDateUtc)
                .addClass(replicationStatus)
                .next()
                    .text('Last Etag: ' + server.SourceLastDocEtag + '\nLast Modified: ' + server.SourceLastModifiedDateUtc);
        }
    }
</script>
